#!/usr/bin/env ruby
# author: Yasuaki Uechi <y@uechi.io>

require 'yaml'
require 'fileutils'
require 'optparse'

CONFIG_FILE = 'dotfiles.config.yml'

def symlink(source, target)
  if !File.exist?(target)
    puts "Symlinking '#{target}' ..."
    `ln -s "#{source}" "#{target}"`
  elsif File.symlink?(target)
    puts "Already symlinked: '#{target}'"
  else
    puts "Not symlinked but exist: '#{target}'"
    puts 'Use --force option to overwrite target'
  end
end

def exist?(source)
  File.exist?(source) || File.symlink?(source)
end

def load_config
  root_path = File.expand_path(File.dirname(__FILE__))
  config = YAML.load_file(File.join(root_path, CONFIG_FILE))['config']
end

class Hash
  def select_if_exist(targets)
    return self if targets.empty?
    select { |key| targets.include? key }
  end
end

def each_with_source_and_target(only = [])
  raise 'Need block' unless block_given?
  root_path = File.expand_path(File.dirname(__FILE__))
  load_config
    .select_if_exist(only)
    .each do |name, config|
      config.each do |source, target|
        source_path = File.join(root_path, name, source)
        target_path = File.expand_path(target)

        yield(name, source_path, target_path)
      end
    end
end

def command_link(args = [], options = [])
  each_with_source_and_target(args) do |name, source, target|
    print "[ #{name} ] "
    if !exist?(target)
      puts "Linking '#{target}' ..."
      FileUtils.mkdir_p File.dirname(target)
      File.symlink source, target
    elsif File.symlink?(target)
      if File.readlink(target) == source
        puts "Already linked: '#{target}'"
      else
        puts "Re-linking '#{target}' ..."
        target_dir = File.dirname(target)
        FileUtils.mkdir_p target_dir unless Dir.exist?(target_dir)
        File.delete target
        File.symlink source, target
      end
    else
      if options[:force]
        puts "Force linking '#{target}' ..."
        target_dir = File.dirname(target)
        FileUtils.mkdir_p target_dir unless Dir.exist?(target_dir)
        FileUtils.copy target, target + '.orig'
        File.delete target
        File.symlink source, target
      else
        puts "Not linked but exist: '#{target}'"
      end
    end
  end
end

def command_unlink(items = [], _options = [])
  each_with_source_and_target(items) do |_name, source, target|
    puts target
    next unless File.symlink?(target) && File.readlink(target) == source
    puts "Unlinking: '#{target}'"
    File.delete target
    FileUtils.copy source, target
  end
end

def command_list(items = [], _options = [])
  each_with_source_and_target(items) do |_name, source, target|
    readable_source = source.sub(__dir__ + "/", "")
    readable_target = target.sub(Dir.home, "~")

    if !exist?(target)
      print "[not linked]"
    elsif File.symlink?(target)
      if File.readlink(target) == source
        print "[linked]"
      else
        print "[broken link]"
      end
    else
      print "[already exist]"
    end

    puts " #{readable_source} ==> #{readable_target}"
  end
end

options = {}
OptionParser.new do |opt|
  opt.on('-f', '--force') {|v| options[:force] = v}
  opt.parse!(ARGV)
end
command = ARGV[0]
args = ARGV[1..-1]
case command
when 'link'
  command_link(args, options)
when 'unlink'
  command_unlink(args, options)
when 'list'
  command_list(args, options)
else
  puts "Usage: dot (link|unlink|list) [ARGS]"
end
