use_envchain() {
  local env_name=$1
  local env_key=$2

  export $(envchain ${env_name} env | grep ${env_key})
}

use_pyenv() {
  local python_version=$1
  local pyenv_python=$(pyenv root)/versions/${python_version}/bin/python

  if [[ ! -x "$pyenv_python" ]]; then
    log_error "Error: $pyenv_python can't be executed."
    return 1
  fi

  unset PYTHONHOME
  local ve=$($pyenv_python -c "import pkgutil; print('venv' if pkgutil.find_loader('venv') else ('virtualenv' if pkgutil.find_loader('virtualenv') else ''))")

  case $ve in
    "venv")
      # VIRTUAL_ENV=$(direnv_layout_dir)/python-$python_version
      export VIRTUAL_ENV=.venv
      if [[ ! -d $VIRTUAL_ENV ]]; then
        $pyenv_python -m venv "$VIRTUAL_ENV"
      fi
      PATH_add "$VIRTUAL_ENV/bin"
      ;;
    "virtualenv")
      export VIRTUAL_ENV=.venv
      if [[ ! -d $VIRTUAL_ENV ]]; then
        $pyenv_python -m virtualenv "$VIRTUAL_ENV"
        if [[ $? != '0' ]]; then
          $pyenv_python -m pip install virtualenv
          $pyenv_python -m virtualenv "$VIRTUAL_ENV"
        fi
      fi
      PATH_add "$VIRTUAL_ENV/bin"
      ;;
    *)
      log_error "Error: neither venv nor virtualenv are available."
      return 1
      ;;
  esac

  export PYENV_VERSION=$python_version

  if [[ -f pyproject.toml ]]; then
    export POETRY_ACTIVE=1
  fi
}
