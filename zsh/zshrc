#zmodload zsh/zprof && zprof

DOTFILES_DIR="${HOME}/Repos/src/github.com/uetchy/dotfiles"
MOD_DIR="${DOTFILES_DIR}/zsh/mod"

# antibody
source <(antibody init)

# language
export LANG="en_US.UTF-8"
export LC_ALL=$LANG

# zsh
source $MOD_DIR/zsh.zsh .

# Homebrew
export PATH="/usr/local/sbin:$PATH"

# spaceship-prompt
source $MOD_DIR/spaceship.zsh .

# iTerm
source $MOD_DIR/iterm.zsh .

# vim
export EDITOR="vim"

# direnv
eval "$(direnv hook zsh)"
#export DIRENV_LOG_FORMAT=""
alias dea="direnv allow"

# git
source $MOD_DIR/git.zsh .

# SSH
source $MOD_DIR/ssh.zsh .

# Node.js
source $MOD_DIR/nodejs.zsh .

# Python
source $MOD_DIR/python.zsh .

# Go
export GOPATH="$HOME/Repos"
export PATH=$PATH:$GOPATH/bin
export GO111MODULE=on

# Rust
[[ -d $HOME/.cargo ]] && export PATH="$HOME/.cargo/bin:$PATH"

# Ruby
source $MOD_DIR/ruby.zsh .

# OCaml
[[ -f $HOME/.opam/opam-init/init.zsh ]] && . $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# Google Cloud Platform
if [ -d /usr/local/Caskroom/google-cloud-sdk ]; then
  source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
  source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'
fi

alias g="gcloud"
alias gc="gcloud compute"
alias gci="gcloud compute instances"

gj() {
  gcloud "$@" --format json
}

# travis
[[ -f $HOME/.travis/travis.sh ]] && source $HOME/.travis/travis.sh

# readme
alias mkreadme="yo standard-readme"

# howdoi
alias so="howdoi -c -a"

# license
# alias license="yo license --license MIT --name $(git config user.name) --email $(git config user.email) --website"
license() {
  local license_name=${@:-mit}
  local endpoint="https://raw.githubusercontent.com/licenses/license-templates/master/templates/${license_name}.txt"
  local year=$(date +%Y)
  local username=$(git config user.name)
  local email=$(git config user.email)
  local organization="${username} <${email}>"

  local license_body=$(curl -s ${endpoint})
  if [ $? != 0 ] || [ $license_body = "404: Not Found" ]; then
    echo "No such license: ${@}"
    return
  fi

  license_body=${license_body//"{{ year }}"/${year}}
  license_body=${license_body//"{{ organization }}"/${organization}}
  echo ${license_body} >/dev/stdout >LICENSE
}

# Visual Studio Code
vs() {
  if [ -z "$1" ]; then
    code .
  else
    if [[ "$1" == md:* ]]; then
      mdfind-dir "${1#md:}" | head -n1 | xargs code
    elif [[ "$1" == ghq:* ]]; then
      fast-ghq-list -p | grep ${1#ghq:} | head -n1 | xargs code
    else
      code $1
    fi
  fi
}

# Docker
source $MOD_DIR/docker.zsh .

# Google
alias google="googler -n 3"
alias j="googler -j"
alias goto="j"

whatis() {
  googler --json "what is ${@}" | jq '.[0] | .abstract, .url' -r
}

phone() {
  whatis "${@} 電話番号" | ggrep -oP '(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3,4}[\s.-]\d{4}'
}

# maintenance utils
source $MOD_DIR/maintenance.zsh .

# macOS specific
source $MOD_DIR/macos.zsh .

# youtube-dl
ydl() {
  youtube-dl "$1" -f mp4 --add-metadata --all-subs
}

ydla() {
  youtube-dl "$1" -x --audio-format=mp3 --embed-thumbnail --add-metadata
}

convert-video-to-mp3() {
  local INPUT="${1}"
  local FILENAME="${1:r}"
	local DIR=$(dirname $1)
	ffmpeg -y -i "${INPUT}" -vframes 1 "${FILENAME}.jpg"
	ffmpeg -y -i "${INPUT}" -i "${FILENAME}.jpg" -acodec libmp3lame -b:a 96k -c:v copy -map 0:a:0 -map 1:v:0 "${FILENAME}.mp3"
	rm "${FILENAME}.jpg"
}

# waifu2x
waifu2x() {
  docker run --rm -it -v $(pwd):/srv/waifu2x nothink/waifu2x -q -m noise_scale --noise_level 2 --scale_ratio "2.0" -i "/srv/waifu2x/$1" -o "/srv/waifu2x/${1%.*}-waifu2x.png"
}

# pdf utils
alias convert-dir-to-pdf="find . -type d | while read d; do convert \"\${d}\"/*.(jpeg|JPEG|jpg|JPG|png|PNG|webp) \"./\${d##*/}.pdf\"; done"

reduce-pdf() {
  gs -sDEVICE=pdfwrite -dCompatibilityLevel=1.4 -dPDFSETTINGS=/ebook -dNOPAUSE -dQUIET -dBATCH -sOutputFile="${1%.*}-reduced.pdf" "${1}"
  mv "${1}" "${1%.*}-orig.pdf"
  mv "${1%.*}-reduced.pdf" "${1}"
}

# weather
alias weather="curl https://wttr.in?format=\"%l:+%c+%t+%p+%o\""

# cloud platform
cloud-status() {
  gcloud info
  cat ~/.aws/credentials
  cat ~/.aws/config
}

#zprof

# tabtab source for packages
# uninstall by removing these lines
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true
