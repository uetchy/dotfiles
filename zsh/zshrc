# zmodload zsh/zprof && zprof

DOTFILES_DIR="${HOME}/.dotfiles"
MOD_DIR="${DOTFILES_DIR}/zsh/mod"

# antibody
source <(antibody init)

# language
export LANG="en_US.UTF-8"
export LC_ALL=$LANG

# zsh
source $MOD_DIR/zsh.zsh .

## arch-specific config
osArch="$(uname -s)"
case "${osArch}" in
  Linux*)
    source $MOD_DIR/linux.zsh .
    ;;
  Darwin*)
    source $MOD_DIR/macos.zsh .
    ;;
esac

# editor
export EDITOR="vim"

# git
source $MOD_DIR/git.zsh .

# ssh
source $MOD_DIR/ssh.zsh .

# direnv
eval "$(direnv hook zsh)"
alias dea="direnv allow"

# spaceship-prompt
source $MOD_DIR/spaceship.zsh .

# screem
alias s="screen -qdRR"
alias sls="screen -ls"

## ls
alias f="open ."
alias ls="exa --time-style iso"
alias la="ls -laag --git --color=always | less -Fr"
alias lt="la -ltchanged --color=always | less -Fr"
alias tree="exa -T -I node_modules --color=always | less -Fr"

# docker
source $MOD_DIR/docker.zsh .

# gst
function new() {
  cd $(gst new $1) && clear
}

# gpg
alias gpg-list="gpg --list-secret-keys --keyid-format LONG"

# media
source $MOD_DIR/media.zsh .

# node
source $MOD_DIR/nodejs.zsh .

# python
source $MOD_DIR/python.zsh .

# golang
export GOPATH="$HOME/Repos"
export PATH=$PATH:$GOPATH/bin
export GO111MODULE=on

# rust
[[ -d $HOME/.cargo ]] && export PATH="$HOME/.cargo/bin:$PATH"

# ruby
source $MOD_DIR/ruby.zsh .

# ocaml
[[ -f $HOME/.opam/opam-init/init.zsh ]] && . $HOME/.opam/opam-init/init.zsh > /dev/null 2> /dev/null || true

# gcp
if [ -d /usr/local/Caskroom/google-cloud-sdk ]; then
  source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
  source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'
fi

alias gc="gcloud"

gj() {
  gcloud "$@" --format json
}

# travis
[[ -f $HOME/.travis/travis.sh ]] && source $HOME/.travis/travis.sh

# duckduckgo
alias ddg="ddgr"
alias j="ddgr -j"

whatis() {
  googler --json "what is ${@}" | jq '.[0] | .abstract, .url' -r
}

# license
license() {
  local license_name=${@:-apache}
  local endpoint="https://raw.githubusercontent.com/licenses/license-templates/master/templates/${license_name}.txt"
  local year=$(date +%Y)
  local username=$(git config user.name)
  local email=$(git config user.email)
  local organization="${username} <${email}>"

  local license_body=$(curl -s ${endpoint})
  if [ $? != 0 ] || [ $license_body = "404: Not Found" ]; then
    echo "No such license: ${@}"
    return
  fi

  license_body=${license_body//"{{ year }}"/${year}}
  license_body=${license_body//"{{ organization }}"/${organization}}
  echo ${license_body} > LICENSE
}

# howdoi
alias so="howdoi -c -a"

# pkill
alias killer="ps | tail -n+2 | fzy | awk '{ print \$1 }' | xargs kill -9"

# weather
alias weather="curl https://wttr.in?format=\"%l:+%c+%t+%p+%o\""

# tabtab source for packages
[[ -f ~/.config/tabtab/__tabtab.zsh ]] && . ~/.config/tabtab/__tabtab.zsh || true

## commnads
alias list-commands="compgen -ac | grep '^[^_]'"

# zprof
