# zmodload zsh/zprof && zprof

# ZSHRC_DIR=${$(readlink ${(%):-%x}):h}
# DOTFILES_DIR=${ZSHRC_DIR:h}
DOTFILES_DIR=$HOME/Repos/src/github.com/uetchy/dotfiles

# Antibody
source <(antibody init)
antibody bundle denysdovhan/spaceship-prompt
antibody bundle zsh-users/zsh-syntax-highlighting
antibody bundle zsh-users/zsh-completions
antibody bundle marzocchi/zsh-notify

# Spaceship
SPACESHIP_PROMPT_ORDER=(
  # time        # Time stampts section (Disabled)
  user # Username section
  dir # Current directory section
  host # Hostname section
  git # Git section (git_branch + git_status)
  # hg            # Mercurial section (hg_branch  + hg_status)
  package # Package version
  # node          # Node.js section
  ruby # Ruby section
  # elixir        # Elixir section
  xcode # Xcode section
  swift # Swift section
  # golang        # Go section
  # php           # PHP section
  # rust # Rust section
  # haskell       # Haskell Stack section
  # julia       # Julia section (Disabled)
  # docker      # Docker section (Disabled)
  aws # Amazon Web Services section
  venv # virtualenv section
  # conda         # conda virtualenv section
  # pyenv         # Pyenv section
  # dotnet        # .NET section
  # ember       # Ember.js section (Disabled)
  # kubecontext   # Kubectl context section
  exec_time # Execution time
  line_sep # Line break
  battery # Battery level and status
  # vi_mode     # Vi-mode indicator (Disabled)
  jobs # Background jobs indicator
  exit_code # Exit code section
  char # Prompt character
)

# Notification
setopt notify
zstyle ':notify:*' command-complete-timeout 5

# no beep sound
setopt no_beep

# Colors
export CLICOLOR=true

# Completion
autoload -U compinit
compinit -u

zstyle ':completion:*' use-cache on                                                  # completion caches
zstyle ':completion:*:functions' ignored-patterns '_*'                               # Ignore completion for non-existant commands
zstyle ':completion:*:cd:*' ignore-parents parent pwd                                # cd will never select the parent directory
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'                                  # insensitive completion
zstyle ':completion:*:approximate:*' max-errors 3 numeric                            # Fuzzy completion
zstyle ':completion:*' file-patterns '^package-lock.json:source-files' '*:all-files' # ignore package-lock.json when completing

# Language
export LANG="en_US.UTF-8"
export LC_ALL=$LANG
WORDCHARS='*?_-.[]~=&;!#$%^(){}<>'

# History
HISTFILE="$HOME/.zsh_history"
HISTSIZE=1000
SAVEHIST=2000
setopt share_history
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks

# Key binding
bindkey -e

# zsh
setopt nonomatch # no glob expansion for *, ?, [ and ]
setopt auto_cd   # cd without cd
setopt correct   # spelling correction for commands
alias reload="source ~/.zshrc"
alias editrc="code ~/.zshrc"

# misc
export EDITOR="vim"
alias tree="tree -F -I node_modules"
alias f="open ."
alias la="ls -la"
alias lt="ls -lt"

# network
function restart_wifi() {
  sudo ifconfig en0 down
  sudo ifconfig en0 up
}

# Git
export GH="https://github.com/uetchy"
alias github-fullname="echo \${PWD#*\.*/}"
alias git="hub"
alias st="git status"
alias gd="git diff"
alias gb="git branch -avv"
alias recent="git recent"
alias pull="git pull --rebase"
alias push="git push -u origin master"
alias stash-all="git stash -u"
alias unstash="git stash pop"
alias gt="gittower ."
alias lg="lazygit"
alias delete-merged-branch='git branch --merged|egrep -v ''\*|master''|xargs git branch -d'
alias set-upstream="git branch -u"
alias set-upstream-origin-master="git branch --set-upstream-to=origin/master master"
git-update-upstream() {
  git fetch upstream
  git rebase upstream/master
}
git-checkout-upstream() {
  git checkout -b upstream upstream/master
}
add() {
  git add $1
  git status
}
gu() {
  local gtPrivateKeyPath=$(git config remote.origin.gtPrivateKeyPath)
  local privateKeyPath=${gtPrivateKeyPath:-~/.ssh/id_rsa}
  local gitUser=$(git config user.name)
  local gitEmail=$(git config user.email)
  echo "Name: ${gitUser}"
  echo "Mail: ${gitEmail}"
  echo "Private: ${privateKeyPath}"
  echo ""
  GIT_SSH_COMMAND="ssh -i ${privateKeyPath} -oIdentitiesOnly=yes" $@
}
gh-open() {
  git api search/repositories?q=$1 | jq -r '.items[0].html_url' | xargs open
}
gh-clone() {
  git api search/repositories?q=$1 | jq -r '.items[0].html_url' | xargs ghq get
}
git-bootstrap() {
  [ ! -d .git ] && git init
  license
  [ ! -f README.md ] && mkreadme
}

## Release
alias release="release-it --git.tagName='v\${version}' --github.release"
releases() {
  local result=$(git api repos/$(github-fullname)/releases)
  jq -r '.[] | "[\(.tag_name)]\n\(.html_url)\n"' <<<"${result}"
}

# SSH
alias sak="ssh-add -K"
remote() {
  ssh $1 -t 'screen -qR'
}
forward() {
  ssh -L ${1}:localhost:${1} -N ${2}
}
alias forward-vnc="forward 5900"
alias forward-jupyter="forward 18888"

# remote worker scripts
export WORKER=com
alias s="screen -qR"
sk() {
  echo 🚀 Syncing to $WORKER
  rsync -C --filter=":- .gitignore" --exclude=".git*" -avz . ${WORKER}:jobs/$(basename $PWD)
}
receive() {
  echo 📞 Receiving \"$1\" on $WORKER
  rsync -C --exclude=".git*" -avz ${WORKER}:jobs/$(basename $PWD)/$1 ./$1
}
run() {
  echo 🏃 Running \"$@\" on $WORKER
  ssh -t $WORKER "cd jobs/$(basename $PWD); bash -ic \"$@\"" 2>/dev/null
}
skrun() {
  sk && echo '' && run $@
}
dive() {
  echo 🎯 Dive into jobs/$(basename $PWD) on $WORKER
  ssh -t $WORKER "cd jobs/$(basename $PWD); bash"
}

## - Language
# Node
export PATH="/usr/local/lib/node_modules:$PATH"
alias npm-list="npm list -g --depth 0"
alias yui="yarn upgrade-interactive"
alias yuil="yarn upgrade-interactive --latest"
alias np-precheck="f=\$(npm pack);tar -tf \$f; rm \$f"
npm-bootstrap() {
  git-bootstrap

  local name=$(basename $PWD)
  local user=$(git config github.user)
  local gh_repo="https://github.com/$user/$name"
  [ ! -f package.json ] && yarn init -y
  [ "$(npe description)" = "undefined" ] && npe description $name
  [ "$(npe keywords)" = "undefined" ] && npe keywords $name
  [ "$(npe repository.type)" = "undefined" ] && npe repository.type git
  [ "$(npe repository.url)" = "undefined" ] && npe repository.url $gh_repo.git
  [ "$(npe homepage)" = "undefined" ] && npe homepage $gh_repo
  [ "$(npe bugs.url)" = "undefined" ] && npe bugs.url $gh_repo/issues
  [ "$(npe scripts.test)" = "undefined" ] && npe scripts.test "echo \"Error: no test specified\" && exit 1"
  fixpack
  [ ! -f .gitignore ] && gitignore add node
}

# Python
export PIPENV_VENV_IN_PROJECT=1
alias pipreq="pip list --format=freeze --not-required > requirements.txt"
alias penv="pipenv"
alias pip-update="pip3 list --outdated --format=json | jq '.[].name' | xargs pip3 install -U"
mkvenv() {
  if [ ! $@ ]; then
    pipenv install --three
  else
    export PATH="$HOME/.pyenv/shims:${PATH}"
    export PYENV_SHELL=zsh
    pipenv install --python $@
  fi
  if ! grep -Fxqs 'layout_pipenv' .envrc; then echo 'layout_pipenv' >>.envrc; fi
  direnv allow
}
rmvenv() {
  sed -i '' '/pipenv/d' ./.envrc
  direnv allow
  rm -rf .venv
}

# Go
export GOPATH="$HOME/Repos"
export PATH=$PATH:$GOPATH/bin

# Rust
if [ -f $HOME/.cargo ]; then source $HOME/.cargo/env; fi

# Ruby
export PATH="/usr/local/opt/ruby/bin:$PATH"
alias be="bundle exec"
alias bi="bundle install --without production:staging --path vendor/bundle --binstubs vendor/bundle/bin"
glar() {
  gem list --remote --all --pre "^${1}$"
}

# OCaml
#test -r $HOME/.opam/opam-init/init.zsh && . $HOME/.opam/opam-init/init.zsh >/dev/null 2>/dev/null || true

## - App Settings
# direnv
eval "$(direnv hook zsh)"
alias dea="direnv allow"

# mdfind
# https://stackoverflow.com/questions/30271328/how-do-i-get-mdfind-to-include-folder-matches-in-addition-to-files
mdfind-dir() {
  # c - match case-INsensitively
  # d - ignore diacritics
  mdfind -onlyin ~ "kMDItemKind==\"Folder\" && kMDItemFSName==\"*${1}*\"cd" | grep -v "node_modules"
}

# ghq
alias get="ghq get"

# gst
letswork() {
  local selectedDir=$(gst --short | peco)
  cd $selectedDir && clear
}

# Markdown
alias mat="mdcat -l"
alias readme="bat -p README*"

# du
alias volumestat="du -m -x -d 3 ~/Repos/src | awk '\$1 >= 500{print}'"

# translate
export JA_GTC_TARGET=ja

# travis
[ -f ~/.travis/travis.sh ] && source ~/.travis/travis.sh

# license
# alias license="yo license --license MIT --name $(git config user.name) --email $(git config user.email) --website"
license() {
  local license_name=${@:-mit}
  local endpoint="https://raw.githubusercontent.com/licenses/license-templates/master/templates/${license_name}.txt"

  local year=$(date +%Y)
  local username=$(git config user.name)
  local email=$(git config user.email)
  local organization="${username} <${email}>"

  local license_body=$(curl -s ${endpoint})
  if [ $? != 0 ] || [ $license_body = "404: Not Found" ]; then
    echo "No such license: ${@}"
    return
  fi

  license_body=${license_body//"{{ year }}"/${year}}
  license_body=${license_body//"{{ organization }}"/${organization}}
  echo ${license_body} >/dev/stdout >LICENSE
}

# readme
alias mkreadme="yo standard-readme"

# iTerm2
source "${HOME}/.iterm2_shell_integration.zsh"

# Visual Studio Code
vs() {
  if [ -z "$1" ]; then
    code .
  else
    if [[ "$1" == md:* ]]; then
      mdfind-dir "${1#md:}" | head -n1 | xargs code
    elif [[ "$1" == ghq:* ]]; then
      ghq list -p | grep ${1#ghq:} | head -n1 | xargs code
    else
      code $1
    fi
  fi
}

# Google
alias g="googler"
alias google="googler"
alias goto="googler -j"
glance() {
  googler -C --np --json $@ | jq '.[0]'
}

# Google Cloud Platform
source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc'
source '/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc'

# Juno
alias juno="open -a Juno"

# Docker
alias d="docker"
alias da="docker ps -a"
alias di="docker images"
alias di="docker images --filter \"{{.Image}}\""
alias dim="docker images --format \"{{.Repository}}:{{.Tag}}\" | sort"
alias dip="docker inspect \$(docker ps -lq) | grep IPAddress | cut -d '\"' -f 4"
alias drm="docker ps -aqf status=exited | xargs docker rm -v"
alias drmi="docker images -qf dangling=true | xargs docker rmi"
alias dc="docker-compose"
docker-tags() {
  curl -s https://registry.hub.docker.com/v2/repositories/$1/tags/ | jq -r '."results"[]["name"]'
}

# peco
function peco-src() {
  local selected_dir=$(ghq list | peco --query "$LBUFFER")
  if [ -n "$selected_dir" ]; then
    BUFFER="cd \"$(ghq root)/${selected_dir}\" && clear"
    zle accept-line
  fi
  zle redisplay
}
zle -N peco-src
bindkey '^r' peco-src
function peco-select-history() {
  BUFFER=$(fc -l -n 1 | tail -r | awk '!a[$0]++' | peco --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N peco-select-history
bindkey '^h' peco-select-history
_peco_mdfind() {
  result=$(mdfind-dir $@ | peco)
  if [ -n "$result" ]; then
    cd $result
    clear
  fi
}
alias search="_peco_mdfind"

# YouTube
ydl() {
  youtube-dl "$1" -f mp4 --add-metadata
}
ydla() {
  youtube-dl "$1" -x --audio-format=mp3 --embed-thumbnail --add-metadata
}

# maintenance utils
alias cask-update="brew cask outdated | awk '{print \$1}' | xargs brew cask reinstall"
update() {
  pushd $DOTFILES_DIR && git pull && popd
  reload
  HOMEBREW_INSTALL_CLEANUP=1 brew upgrade
  pip-update
  cask-update
  mas upgrade
  david -gu
}
clearCache() {
  npm cache verify
  gem cleanup
  brew cleanup
  brew doctor
}
clearQLCache() {
  qlmanage -r
  qlmanage -r cache
}

#zprof
