DOTFILES_DIR=${ZSHRC_DIR:h}

# Antibody
source <(antibody init)
antibody bundle mafredri/zsh-async # pure deps
antibody bundle sindresorhus/pure
antibody bundle zsh-users/zsh-syntax-highlighting
antibody bundle zsh-users/zsh-completions
antibody bundle t413/zsh-background-notify


# General Settings
setopt interactivecomments # allow to use '#' as starting comment line
export CLICOLOR=true


# Completion
autoload -U compinit; compinit -C
zstyle ':completion:*' use-cache on # completion caches
zstyle ':completion:*:functions' ignored-patterns '_*' # Ignore completion for non-existant commands
# zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
# zstyle ':completion:*' completer _complete _match _approximate
# zstyle ':completion:*:approximate:*' max-errors 3 numeric # Fuzzy completion
zstyle ':completion:*:cd:*' ignore-parents parent pwd # cd will never select the parent directory (e.g.: cd ../<TAB>):
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # insensitive completion

setopt auto_cd # move to directory without 'cd'
setopt correct
setopt notify # notify messages
setopt no_beep # no beep sound
export LANG="en_US.UTF-8"
export LC_ALL=$LANG
export EDITOR="vim"


# Key binding
bindkey -e


# History
HISTFILE="$HOME/.zsh_history"
HISTSIZE=5000
SAVEHIST=10000
setopt share_history
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks


# atom
alias ae="atom ."


# Visual Studio Code
alias vs="code ."


# zsh
alias reload="source ~/.zshrc"


# direnv
eval "$(direnv hook zsh)"


# POSIX
alias la="ls -al"


# Git
alias git="hub"
alias push="git push -u origin master"


# SSH
remote() {
  mosh $1 -- screen -qRR
}

remote-ssh() {
  ssh $1 -t screen -q -D -RR
}

forward() {
  ssh -L $1:localhost:$1 -N $2
}


# clover scripts
sk() {
  rsync -ruv --exclude '.git*' . clover01:sync/$(basename $PWD)
}

run() {
  ssh -t clover03 "cd sync/$(basename $PWD); $@"
}

skrun() {
  sk && echo '---' && run $@
}


# Ruby
alias be="bundle exec"
alias bi="bundle install --without production:staging --path vendor/bundle --binstubs vendor/bundle/bin --jobs 4"

glar() {
  gem list --remote --all --pre "^${1}$"
}


# Python
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init -)"

alias mkvenv="python -m venv venv"
alias activate="source venv/bin/activate"
alias pv="pyenv versions"

pip-update() {
  pip list --format=legacy --outdated | awk '{print $1}' | xargs pip install -U
}


# Node.js
#export PATH="/usr/local/lib/node_modules:$PATH"
alias npm-list="npm list -g --depth 0"


# Go
#export GOPATH="$HOME/Repos"
#export PATH=$PATH:$GOPATH/bin


# CUDA
# download at https://developer.nvidia.com/cuda-toolkit
export CUDA_HOME=/usr/local/cuda # Actual path is /Developer/NVIDIA/CUDA-8.0
export PATH="$CUDA_HOME/bin:$PATH"
export DYLD_LIBRARY_PATH="$CUDA_HOME/lib64:$DYLD_LIBRARY_PATH"


# torch
if [ -x $HOME/torch/install/bin/torch-activate ]; then
  . $HOME/torch/install/bin/torch-activate
fi


# Docker
alias d="docker"
alias da="docker ps -a"
alias di="docker images"
alias dlq="docker ps -lq"
alias dip="docker inspect \$(docker ps -lq) | grep IPAddress | cut -d '\"' -f 4"
alias drm="docker ps -aqf status=exited | xargs docker rm -v"
alias drmi="docker images -qf dangling=true | xargs docker rmi"

alias dc="docker-compose"
alias dm="docker-machine"

dm-env() {
  eval $(docker-machine env $1)
}

dm-start() {
	docker-machine start default
	dm-env default
}


# peco
function peco-src() {
  local selected_dir=$(ghq list | peco --query "$LBUFFER")
  if [ -n "$selected_dir" ]; then
    BUFFER="cd \"$(ghq root)/${selected_dir}\"; clear"
    zle accept-line
  fi
  zle redisplay
}
zle -N peco-src
bindkey '^j' peco-src

function peco-select-history() {
  BUFFER=$(fc -l -n 1 | tail -r | awk '!a[$0]++' | peco --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N peco-select-history
bindkey '^h' peco-select-history


update() {
  pushd $DOTFILES_DIR && git pull && popd
  reload
  sudo apt update
  sudo apt upgrade
  apm update --no-confirm
  yarn update-interactive
  pip-update
}


gu() {
  gtPrivateKeyPath=$(git config remote.origin.gtPrivateKeyPath)
  privateKeyPath=${gtPrivateKeyPath:-~/.ssh/id_rsa}
  gitUser=$(git config user.name)
  gitEmail=$(git config user.email)
  echo "Name: ${gitUser}"
  echo "Mail: ${gitEmail}"
  echo "Private: ${privateKeyPath}"
  echo ""
  GIT_SSH_COMMAND="ssh -i ${privateKeyPath} -oIdentitiesOnly=yes" $@
}
