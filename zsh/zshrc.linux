DOTFILES_DIR=$HOME/Repos/src/github.com/uetchy/dotfiles

# Antibody
source <(antibody init)
antibody bundle denysdovhan/spaceship-prompt
antibody bundle zsh-users/zsh-syntax-highlighting
antibody bundle zsh-users/zsh-completions
antibody bundle marzocchi/zsh-notify


# Theme
SPACESHIP_GOLANG_SHOW=false


# Notification
setopt notify
zstyle ':notify:*' command-complete-timeout 5
setopt no_beep # no beep sound


# Completion
autoload -U compinit; compinit -C
zstyle ':completion:*' use-cache on
zstyle ':completion:*:functions' ignored-patterns '_*' # Ignore completion for non-existant commands
zstyle ':completion:*:cd:*' ignore-parents parent pwd # cd will never select the parent directory (e.g.: cd ../<TAB>):
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}' # insensitive completion
setopt auto_cd
setopt correct

# Language
export LANG="en_US.UTF-8"
export LC_ALL=$LANG


# Key binding
bindkey -e


# History
HISTFILE="$HOME/.zsh_history"
HISTSIZE=1000
SAVEHIST=5000
setopt share_history
setopt hist_ignore_dups
setopt hist_ignore_space
setopt hist_reduce_blanks


# vim
export EDITOR="vim"


# Visual Studio Code
alias vs="code ."


# zsh
alias reload="source ~/.zshrc"


# direnv
#eval "$(direnv hook zsh)"


# autoenv
#source /usr/local/opt/autoenv/activate.sh


# POSIX
alias ls="ls --color=auto"
alias la="ls -al"


# Git
alias git="hub"
alias push="git push -u origin master"
alias st="git status"
alias gd="git diff"
alias com="git commit"
alias br="git branch"


# SSH
remote() {
  ssh $1 -t 'screen -qR'
}

forward() {
  ssh -L ${1}:localhost:${1} -N ${2}
}

alias forward-vnc="forward 5900"
alias forward-jupyter="forward 18888"

alias s="screen -qR"
alias sls="screen -ls"

# remote worker scripts
export WORKER=sfc

sk() {
  echo 🚀  Syncing to $WORKER
  rsync -C --filter=":- .gitignore" --exclude=".git*" -avz . ${WORKER}:jobs/$(basename $PWD)
}

receive() {
  echo 📞  Receiving \"$1\" on $WORKER
  rsync -C --exclude=".git*" -avz ${WORKER}:jobs/$(basename $PWD)/$1 ./$1
}

run() {
  echo 🏃  Running \"$@\" on $WORKER
  ssh -t $WORKER "cd jobs/$(basename $PWD); bash -ic \"$@\"" 2> /dev/null
}

skrun() {
  sk && echo '' && run $@
}

dive() {
  echo 🎯  Dive into jobs/$(basename $PWD) on $WORKER
  ssh -t $WORKER "cd jobs/$(basename $PWD); bash"
}

ssh-mount() {
  mkdir ./$1
  sshfs $1: ./$1 -o volname=$1 -o cache_timeout=10
}


# Ruby
alias be="bundle exec"
alias bi="bundle install --without production:staging --path vendor/bundle --binstubs vendor/bundle/bin --jobs 4"

glar() {
  gem list --remote --all --pre "^${1}$"
}


# Python
export PATH=$HOME/anaconda3/bin:$PATH
alias activate="source venv/bin/activate"

mkvenv() {
  python3 -m venv venv
  echo 'source ./venv/bin/activate' >> .envrc
  direnv allow
}

pip-update() {
  pip2 list --format=legacy --outdated | awk '{print $1}' | xargs pip2 install -U
  pip3 list --format=legacy --outdated | awk '{print $1}' | xargs pip3 install -U
}


# Node.js
export PATH="./node_modules/.bin:/usr/local/lib/node_modules:$PATH"
alias npm-list="npm list -g --depth 0"
alias yui="yarn upgrade-interactive"
alias npmc="npm-check"


# Go
export GOPATH="$HOME/Repos"
export PATH=$PATH:$GOPATH/bin


# linuxbrew
export PATH="/home/linuxbrew/.linuxbrew/bin:$PATH"
export MANPATH="/home/linuxbrew/.linuxbrew/share/man:$MANPATH"
export INFOPATH="/home/linuxbrew/.linuxbrew/share/info:$INFOPATH"


# Hyperdash
alias hd="hyperdash run -n"


# Docker
alias d="sudo docker"
alias drun="sudo docker run --runtime=nvidia"
alias run_ml="sudo docker run --runtime=nvidia --rm -v $PWD:/usr/src/app/host -it uetchy/machinelearning"
alias da="docker ps -a"
alias di="docker images"
alias dlq="docker ps -lq"
alias dip="docker inspect \$(docker ps -lq) | grep IPAddress | cut -d '\"' -f 4"
alias drm="docker ps -aqf status=exited | xargs docker rm -v"
alias drmi="docker images -qf dangling=true | xargs docker rmi"

alias dc="docker-compose"
alias dm="docker-machine"

dm-env() {
  eval $(docker-machine env $1)
}

dm-start() {
	docker-machine start default
	dm-env default
}


# peco
function peco-src() {
  local selected_dir=$(ghq list | peco --query "$LBUFFER")
  if [ -n "$selected_dir" ]; then
    BUFFER="cd \"$(ghq root)/${selected_dir}\" && clear"
    zle accept-line
  fi
  zle redisplay
}
zle -N peco-src
bindkey '^r' peco-src

function peco-select-history() {
  BUFFER=$(fc -l -n 1 | tail -r | awk '!a[$0]++' | peco --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle redisplay
}
zle -N peco-select-history
bindkey '^h' peco-select-history


# YouTube
ydl() {
  youtube-dl "$1" -f mp4 --add-metadata
}
ydl_audio() {
  youtube-dl "$1" -x --audio-format=mp3 --embed-thumbnail --add-metadata
}


update() {
  pushd $DOTFILES_DIR && git pull && popd
  reload
  brew upgrade
  sudo apt update
  sudo apt upgrade -y
  #conda update --all -y
  pip-update
  npm-check -gu
}


clearCache() {
  npm cache verify
  brew cleanup
  brew prune
  brew doctor
  sudo apt autoremove
}
